name: SIT CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - GH-CI-CD # Adjust as needed
    paths-ignore:
      - '.github/**'
      - '*.md'
  workflow_dispatch:

jobs:
  Build-SIT:

    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest

    env:
      SolutionName: StayInTarkov                              
      CSProj: Source/StayInTarkov.csproj
      ARTIFACT_NAME: artifact.txt 

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: dotnet Restore
        run: dotnet restore

      - name: dotnet Publish
        run: |
          mkdir ${{ env.SolutionName }}-${{ matrix.configuration }}
          dotnet build ${{ env.CSProj }} -c ${{ matrix.configuration }} -o ${{ env.SolutionName }}-${{ matrix.configuration }}

      - name: Remove unnecessary files
        run: |
          del ${{ env.SolutionName }}-${{ matrix.configuration }}\StayInTarkov.pdb

      - name: Zip remaining files
        run: |
          Compress-Archive -Path ${{ env.SolutionName }}-${{ matrix.configuration }} -DestinationPath ${{ env.SolutionName }}-${{ matrix.configuration }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.SolutionName }}-${{ matrix.configuration }}\
          if-no-files-found: error

      - name: Comment artifact URL on PR
        uses: actions/github-script@v5
        if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactList = await github.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const artifact = artifactList.data.artifacts.find(a => a.name === context.env.ARTIFACT_NAME);
            if (artifact) {
              const artifactURL = artifact.archive_download_url;
              const prNumber = context.payload.pull_request.number;
              const body = `
              **Artifact Uploaded**
              You can download the artifact [here](${artifactURL}).
              `;
              await github.issues.createComment({
                issue_number: prNumber,
                body: body
              });
            }
